//go:generate go run gen_schema_parse.go common.go

package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"
	"unicode"
)

const (
	apiPath        = "../api/parse"
	paramsTemplate = `// Code generated by gen_schema_parse.go DO NOT EDIT.

package parse



`
)

func main() {

	for _, s := range structs {
		if err := generateParamParse(s); err != nil {
			log.Panic(err)
		}
	}

}

func generateParamParse(s structure) error {

	file, err := os.Create(apiPath + "/" +strings.ToLower(s.Name) + ".go")
	if err != nil {
		return fmt.Errorf(apiPath + "/" +strings.ToLower(s.Name) + ".go: %s", err)
	}
	defer file.Close()

	paramsTemplate := template.Must(template.New(s.Name).Parse(paramsTemplate))

	return paramsTemplate.Execute(file, s)
}

//
// source https://github.com/asaskevich/govalidator/blob/master/utils.go#L107-L119
//
func camelCaseToUnderscore(str string) string {
	var output []rune
	var segment []rune
	for _, r := range str {
		if !unicode.IsLower(r) {
			output = addSegment(output, segment)
			segment = nil
		}
		segment = append(segment, unicode.ToLower(r))
	}
	output = addSegment(output, segment)
	return string(output)
}

func addSegment(inrune, segment []rune) []rune {
	if len(segment) == 0 {
		return inrune
	}
	if len(inrune) != 0 {
		inrune = append(inrune, '_')
	}
	inrune = append(inrune, segment...)
	return inrune
}
