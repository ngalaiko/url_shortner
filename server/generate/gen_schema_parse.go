//go:generate go run gen_schema_parse.go common.go

package main

import (
	"fmt"
	"log"
	"os"
	"strings"
	"text/template"
)

const (
	apiPath        = "../api/parse"
	paramsTemplate = `// Code generated by gen_schema_parse.go DO NOT EDIT.

package parse

import (
	"strconv"
	"time"

	"github.com/valyala/fasthttp"

	"github.com/ngalayko/url_shortner/server/schema"
)

func {{ .Name }}(args *fasthttp.Args) (*schema.{{ .Name }}, error) {

	result := &schema.{{ .Name }}{}

	var funcErr error
	args.VisitAll(func(key, value []byte) {
		switch string(key) {
		{{- range .Fields -}}
			{{- if eq .Name "ID" }}
			{{- else if contains .Type "time.Time" }}{{ else }}
		case "{{ underscore .Name }}":
			{{- if contains .Type "*" -}}
			result.{{ .Name }} = new({{ tailStr .Type }})
			{{- end -}}
			{{- if contains .Type "string" }}
			result.{{ .Name }} = string(value)
			{{- else if contains .Type "int" }}
			v, err := strconv.ParseInt(string(value), 10, 64)
			if err != nil {
				funcErr = err
				break
			}

			{{- if contains .Type "*" -}}
			*result.{{ .Name }} = {{ tailStr .Type }}(v)
			{{ else }}
			result.{{ .Name }} = {{ .Type }}(v)
			{{- end -}}
			{{- end -}}
			{{- end }}
		{{- end }}
		}
	})

	return result, funcErr
}
`
)

func main() {

	for _, s := range structs {
		if err := generateParamParse(s); err != nil {
			log.Panic(err)
		}
	}

}

func generateParamParse(s structure) error {

	file, err := os.Create(apiPath + "/" + strings.ToLower(s.Name) + ".go")
	if err != nil {
		return fmt.Errorf(apiPath+"/"+strings.ToLower(s.Name)+".go: %s", err)
	}
	defer file.Close()

	paramsTemplate := template.Must(template.New(s.Name).Funcs(getTemplateFuncs()).Parse(paramsTemplate))

	return paramsTemplate.Execute(file, s)
}
