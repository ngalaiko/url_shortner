//go:generate go run gen_names_array.go common.go

package main

import (
	"bytes"
	"io/ioutil"
	"log"
	"regexp"
	"strings"
	"text/template"
)

var (
	tablesArrayTemplate = regexp.MustCompile(`(?s)string\n}{.*?}[^),]`)
)

const (
	generateSchemaTabelsFile = "gen_schema_tables.go"

	tablesTemplate = `}{
	// this array generated by gen_names_array.go DO NOT EDIT.
	{{- range . }}
		{reflect.TypeOf(schema.{{ .Name }}{}), "{{ .NamePlural }}"},
	{{- end }}
	}
`
)

type tableData struct {
	Name       string
	NamePlural string
	SqlQueries []string
}

func main() {

	tablesTemplate := template.Must(template.New("enums_template").Parse(tablesTemplate))

	tablesData := make([]tableData, 0, len(structs))
	for _, str := range structs {
		tablesData = append(tablesData, tableData{
			Name:       str.Name,
			NamePlural: strings.ToLower(str.Name) + "s",
		})
	}

	tablesBuffer := &bytes.Buffer{}
	if err := tablesTemplate.Execute(tablesBuffer, tablesData); err != nil {
		log.Fatal(err)
	}

	generateSchemaTablesData, err := ioutil.ReadFile(generateSchemaTabelsFile)
	if err != nil {
		log.Fatal(err)
	}

	generateSchemaTablesData = tablesArrayTemplate.ReplaceAll(generateSchemaTablesData, tablesBuffer.Bytes())

	err = ioutil.WriteFile(generateSchemaTabelsFile, generateSchemaTablesData, 0644)
	if err != nil {
		log.Fatal(err)
	}
}
