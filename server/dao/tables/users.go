// Code generated by gen_schema_tables.go DO NOT EDIT.

package tables

import (
	"bytes"
	"fmt"

	"go.uber.org/zap"

	"github.com/ngalayko/url_shortner/server/dao"
	"github.com/ngalayko/url_shortner/server/schema"
)

// GetUserById returns User from db or cache
func (t *Tables) GetUserById(id uint64) (*schema.User, error) {
	return t.GetUserByFields(dao.NewParam(1).Add("id", id))
}

// GetUserByFields returns Users from db or cache
func (t *Tables) GetUserByFields(field dao.Param) (*schema.User, error) {
	fields := dao.NewParams(1).Append(field)

	uu, err := t.SelectUsersByFields(fields)
	if err != nil {
		return nil, err
	}

	return uu[0], nil
}

// SelectUsersByFields select many users by fields
func (t *Tables) SelectUsersByFields(fields dao.Params) ([]*schema.User, error) {

	if fields.Len() == 0 {
		return nil, nil
	}

	result := make([]*schema.User, 0, fields.Len())
	missedFields := dao.NewParams(fields.Len())
	for _, f := range fields {

		if value, ok := t.cache.Load(t.usersCacheKey(f["id"])); ok {
			result = append(result, value.(*schema.User))
			continue
		}

		missedFields = append(missedFields, f)
	}

	if missedFields.Len() == 0 {
		return result, nil
	}

	b := bytes.Buffer{}
	b.WriteString("SELECT * " +
		"FROM users " +
		"WHERE ")

	i := 1
	values := make([]interface{}, 0, missedFields.Len())
	for fi, missedF := range missedFields {

		if fi > 0 {
			b.WriteString(" OR ")
		}

		b.WriteRune('(')
		j := 0
		for key, value := range missedF {
			values = append(values, value)

			if j > 0 {
				b.WriteString(" AND ")
			}

			b.WriteString(fmt.Sprintf("%s = $%d", key, i))

			i++
			j++
		}
		b.WriteRune(')')
	}

	uu := make([]*schema.User, 0, missedFields.Len())
	if err := t.db.Select(&uu, b.String(), values...); err != nil {
		return nil, err
	}

	for _, u := range uu {
		t.cache.Store(t.usersCacheKey(u.ID), u)
		result = append(result, u)
	}

	return result, nil
}

// InsertUser inserts User in db and cache
func (t *Tables) InsertUser(u *schema.User) error {
	return t.db.Mutate(func(tx *dao.Tx) error {

		insertSQL := "INSERT INTO users " +
			"(first_name, last_name, created_at, deleted_at) " +
			"VALUES " +
			"($1, $2, $3, $4) " +
			"RETURNING id"

		var id uint64
		if err := tx.Get(&id, insertSQL, u.FirstName, u.LastName, u.CreatedAt, u.DeletedAt); err != nil {
			return err
		}
		u.ID = id

		t.logger.Info("User created",
			zap.Reflect("$.Name", u),
		)
		t.cache.Store(t.usersCacheKey(u.ID), u)
		return nil
	})
}

// UpdateUser updates User in db and cache
func (t *Tables) UpdateUser(u *schema.User) error {
	return t.db.Mutate(func(tx *dao.Tx) error {

		updateSQL := "UPDATE users " +
			"SET " +
			"first_name = $1, " +
			"last_name = $2, " +
			"created_at = $3, " +
			"deleted_at = $4 " +
			fmt.Sprintf("WHERE id = %d", u.ID)

		_, err := tx.Exec(updateSQL, u.FirstName, u.LastName, u.CreatedAt, u.DeletedAt)
		if err != nil {
			return err
		}

		t.logger.Info("User updated",
			zap.Reflect("$.Name", u),
		)
		t.cache.Store(t.usersCacheKey(u.ID), u)
		return nil
	})
}

func (t *Tables) usersCacheKey(id interface{}) string {
	b := bytes.Buffer{}
	b.WriteString("user")

	b.WriteString(fmt.Sprintf("_id=%v", id))

	return b.String()
}
