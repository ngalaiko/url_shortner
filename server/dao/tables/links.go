// Code generated by generate_schema_tables.go DO NOT EDIT.

package tables

import (
	"bytes"
	"fmt"

	"github.com/ngalayko/url_shortner/server/dao"
	"github.com/ngalayko/url_shortner/server/logger"
	"github.com/ngalayko/url_shortner/server/schema"
)

type LinkTable struct {
	db     *dao.Db
	logger *logger.Logger
}

func (lt *LinkTable) InsertLink(l *schema.Link) error {
	return l.db.Mutate(func(tx *dao.Tx) error {

		insertSQL := "INSERT INTO links" +
			"(user_id, url, short_url, clicks, views, expired_at, created_at, deleted_at)" +
			"VALUES" +
			fmt.Sprintf("(%v, %v, %v, %v, %v, %v, %v, %v)",
				l.UserID,
				l.URL,
				l.ShortURL,
				l.Clicks,
				l.Views,
				l.ExpiredAt,
				l.CreatedAt,
				l.DeletedAt)

		_, err := tx.Exec(insertSQL)
		if err != nil {
			return err
		}

		lt.logger.Info("Link created",
			zap.Reflect("$.Name", l),
		)
		return nil
	})
}

func (lt *LinkTable) UpdateLink(l *schema.Link) error {
	return l.db.Mutate(func(tx *dao.Tx) error {

		updateSQL := "UPDATE links" +
			"SET" +
			fmt.Sprintf("user_id = %v,", l.URL) +
			fmt.Sprintf("url = %v,", l.ShortURL) +
			fmt.Sprintf("short_url = %v,", l.Clicks) +
			fmt.Sprintf("clicks = %v,", l.Views) +
			fmt.Sprintf("views = %v,", l.ExpiredAt) +
			fmt.Sprintf("expired_at = %v,", l.CreatedAt) +
			fmt.Sprintf("created_at = %v,", l.DeletedAt) +
			fmt.Sprintf("deleted_at = %v", l.DeletedAt)

		_, err := tx.Exec(updateSQL)
		if err != nil {
			return err
		}

		lt.logger.Info("Link updated",
			zap.Reflect("$.Name", l),
		)
		return nil
	})
}
