// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package schema

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type linkTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *linkTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("links").
func (v *linkTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *linkTableType) Columns() []string {
	return []string{"id", "user_id", "url", "short_url", "views_limit", "views", "created_at", "deleted_at"}
}

// NewStruct makes a new struct for that view or table.
func (v *linkTableType) NewStruct() reform.Struct {
	return new(Link)
}

// NewRecord makes a new record for that table.
func (v *linkTableType) NewRecord() reform.Record {
	return new(Link)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *linkTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// LinkTable represents links view or table in SQL database.
var LinkTable = &linkTableType{
	s: parse.StructInfo{Type: "Link", SQLSchema: "", SQLName: "links", Fields: []parse.FieldInfo{{Name: "ID", Type: "uint64", Column: "id"}, {Name: "UserID", Type: "uint64", Column: "user_id"}, {Name: "URL", Type: "string", Column: "url"}, {Name: "ShortURL", Type: "string", Column: "short_url"}, {Name: "ViewsLimit", Type: "uint64", Column: "views_limit"}, {Name: "Views", Type: "uint64", Column: "views"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "DeletedAt", Type: "*time.Time", Column: "deleted_at"}}, PKFieldIndex: 0},
	z: new(Link).Values(),
}

// String returns a string representation of this struct or record.
func (s Link) String() string {
	res := make([]string, 8)
	res[0] = "ID: " + reform.Inspect(s.ID, true)
	res[1] = "UserID: " + reform.Inspect(s.UserID, true)
	res[2] = "URL: " + reform.Inspect(s.URL, true)
	res[3] = "ShortURL: " + reform.Inspect(s.ShortURL, true)
	res[4] = "ViewsLimit: " + reform.Inspect(s.ViewsLimit, true)
	res[5] = "Views: " + reform.Inspect(s.Views, true)
	res[6] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[7] = "DeletedAt: " + reform.Inspect(s.DeletedAt, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Link) Values() []interface{} {
	return []interface{}{
		s.ID,
		s.UserID,
		s.URL,
		s.ShortURL,
		s.ViewsLimit,
		s.Views,
		s.CreatedAt,
		s.DeletedAt,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Link) Pointers() []interface{} {
	return []interface{}{
		&s.ID,
		&s.UserID,
		&s.URL,
		&s.ShortURL,
		&s.ViewsLimit,
		&s.Views,
		&s.CreatedAt,
		&s.DeletedAt,
	}
}

// View returns View object for that struct.
func (s *Link) View() reform.View {
	return LinkTable
}

// Table returns Table object for that record.
func (s *Link) Table() reform.Table {
	return LinkTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Link) PKValue() interface{} {
	return s.ID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Link) PKPointer() interface{} {
	return &s.ID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Link) HasPK() bool {
	return s.ID != LinkTable.z[LinkTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Link) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ID = uint64(i64)
	} else {
		s.ID = pk.(uint64)
	}
}

// check interfaces
var (
	_ reform.View   = LinkTable
	_ reform.Struct = (*Link)(nil)
	_ reform.Table  = LinkTable
	_ reform.Record = (*Link)(nil)
	_ fmt.Stringer  = (*Link)(nil)
)

func init() {
	parse.AssertUpToDate(&LinkTable.s, new(Link))
}
