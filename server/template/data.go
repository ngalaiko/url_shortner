// Code generated by go-bindata.
// sources:
// template/data/head.html
// template/data/index.html
// template/data/not_found.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDataHeadHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x4d\x6f\xe3\x36\x10\xbd\xef\xaf\x98\xaa\x1f\xb1\xd1\x15\x99\x6c\xb6\x5d\x20\x96\xbd\x08\xba\xdd\x45\x01\xa3\x87\x16\x39\x15\x45\x30\xa2\xc6\x12\x1d\x9a\x14\xc8\x91\x1d\x43\xeb\xff\x5e\x48\x8e\x6d\x59\x56\xda\xea\x90\x90\xe3\x37\xf3\x1e\xe7\x8d\xa8\xa4\xe0\x95\x99\xbd\x01\x00\x48\x0a\xc2\x6c\xbf\x6c\xb7\xac\xd9\xd0\xec\xc1\x1b\x08\x85\xf3\x4c\x3e\x91\xfb\xd0\x09\x62\xb4\x7d\x02\x4f\x66\x1a\x05\xde\x1a\x0a\x05\x11\x47\x50\x78\x5a\x4c\xa3\x82\xb9\x0c\x77\x52\xae\xf0\x59\x65\x56\xa4\xce\x71\x60\x8f\x65\xb3\x51\x6e\x25\x8f\x01\x79\x2b\x6e\xc5\x07\xa9\x42\x38\xc5\xc4\x4a\x5b\xa1\x42\x88\x3a\x64\xdf\xc4\x31\x7c\x31\x2e\x45\x03\x41\x33\x01\x63\x0e\xa3\x9c\x31\x17\xcb\x30\x86\x18\xbe\x38\x97\x1b\x82\x7b\x8b\x66\xcb\x5a\x05\x88\xe3\x4e\x76\x50\x5e\x97\x0c\x18\xb6\x56\x41\xf0\xea\x24\x70\xb3\xd9\x88\xbc\xcd\x65\xcc\x57\x68\x31\x27\xdf\x2a\x6c\x6a\xcb\x65\xf8\xa8\xb3\xe9\xc3\x7d\x7c\x73\xf3\xee\xc3\xfb\xf7\xb7\xd7\x3f\xc7\x37\xd1\x2c\x91\xfb\x7a\x17\x04\xa7\x40\xf3\x6c\xb4\xcd\xdc\x46\x64\xc8\x38\xc7\x2d\x79\x98\x5e\x86\xbe\x7e\x85\xbf\xfe\x9e\x9c\xa5\x2d\x2a\xab\x58\x3b\x0b\x8d\x82\xd1\xb8\x3e\x82\x45\x59\x85\x62\x84\x3e\xaf\x56\x64\x39\x8c\x27\xbb\xb3\xbc\x16\x7e\xb5\x0c\x57\x6f\xc1\xd2\x06\x3e\x21\xd3\x68\x3c\x9e\x0c\x60\x94\xb3\x0b\x9d\x5f\xbd\x85\xab\xf3\x93\x5d\x75\xd0\xaf\x9e\x71\xdf\x3e\x19\x18\x59\x2b\xb9\x0c\x52\xdb\x8c\x9e\xc5\x32\xfc\xef\xbe\x1c\x0f\xe8\x29\xd3\x9e\x14\xdf\x57\x5c\x8c\xc6\x50\x9f\xa1\x3a\x1d\x34\x4e\x61\x93\x20\x3c\x95\x06\x15\x8d\xce\xdc\x5b\xa0\xa2\xd4\xb9\xa7\xd6\xb5\xf5\x3b\x71\x73\x2d\x33\x8d\xc6\xe5\xd2\x61\xc5\xc5\xc7\x08\x7e\xbc\x28\xdc\x3c\x91\x32\x9a\x2c\x3f\xea\x6c\x5a\xd7\xf0\x9d\xf8\xa5\xed\x8a\xf8\xfc\x52\xee\xbe\x2c\x7f\xfb\x04\xbb\xdd\xab\xe9\x3f\x1c\xe4\x3f\x56\x5e\x0f\x96\x98\xbb\x5c\xdb\x87\x3f\xe6\xff\x51\x25\x94\xce\x06\x7a\xe4\x6d\x49\x53\xe5\x32\x8a\x2e\x90\x3d\x17\x77\xaf\xb8\x94\xc8\xd3\x4b\x9c\xa4\x2e\xdb\x76\x8c\xb0\xb8\x06\x65\x30\x84\x69\x64\x71\x9d\xa2\x87\xfd\xbf\x58\xdb\x35\xf9\x40\xd1\xb9\x47\x49\xa6\x8f\x78\xe5\x2c\xa3\xb6\xe4\xe3\x85\xa9\x74\xd6\x43\xf6\xd1\x2f\x65\x1b\x25\xe4\x07\xb0\x2d\x1e\x7b\xe8\xd4\xa3\xcd\x0e\x77\xc7\xb7\x51\x7b\xef\xfc\xd9\xdc\x3b\xb6\xb9\x78\x70\x80\x51\x66\x7a\xdd\x93\x5c\x99\x4e\xd5\xc3\xf1\x3a\x4b\xaf\xf3\x82\x3b\x8a\xea\x1a\xf4\x02\xc4\x43\x20\x0f\xbb\xdd\x25\x85\xd1\x3d\x95\x4c\xcf\x1c\xcd\x5a\xa7\x9b\x24\xf1\x59\xfb\xc0\xbf\xe3\x8a\x60\xb7\x83\x53\x78\x8e\xc7\x68\x22\x8d\x1e\x10\x6f\xf4\x2c\x49\x2b\x66\x67\x0f\x0c\x29\x5b\x48\xd9\xc6\x19\xda\x9c\x8e\xde\xa4\x6c\x23\x70\x56\x19\xad\x9e\xa6\x91\x71\xb9\xab\x78\x34\x8e\x66\xf3\x76\x95\xc8\x7d\x8d\xd9\x39\x4b\x5d\x03\x99\x40\xaf\x1c\x69\x88\x78\x90\xed\xfc\xe5\x6c\x39\xb5\x85\x8d\xe6\x02\x0e\xf3\xfd\x2f\x02\x6c\xd6\xe7\x4f\x64\x65\x7a\x86\x9d\x7b\x98\x48\x8b\xdd\xed\xd0\x04\x46\xd0\x7e\x6a\xa6\xd1\x46\x67\x5c\xdc\xc1\x4f\xd7\xdf\x4f\x80\x5d\x79\x07\xb7\xcd\xaa\x74\x41\x37\x17\xc5\x5d\xf3\x59\x42\xd6\x6b\x9a\xf4\x26\xb0\xae\xf7\x47\x10\xbf\x7a\xef\x7c\xb8\x10\xd9\x21\x45\x43\x9e\xa1\xfd\xfb\x62\xcb\xc0\x34\xd7\x35\xf8\xe6\x37\x10\x83\xfd\x2e\x3d\x35\xf3\x22\xda\x51\x68\x36\x43\x05\x06\x9b\x75\x31\xde\x27\xe0\x9b\x7f\x02\x00\x00\xff\xff\x64\x7b\x00\x75\xb7\x07\x00\x00")

func templateDataHeadHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateDataHeadHtml,
		"template/data/head.html",
	)
}

func templateDataHeadHtml() (*asset, error) {
	bytes, err := templateDataHeadHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/data/head.html", size: 1975, mode: os.FileMode(420), modTime: time.Unix(1516620918, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x53\xbd\xae\xda\x30\x14\xde\x79\x8a\x53\x4b\x57\x6a\x87\xe0\x4a\xa8\x0b\x38\xd9\xba\x31\x54\x54\x74\x77\x62\x43\xac\xeb\xd8\xd1\xf1\x01\x8a\x22\xde\xbd\x4a\x72\xaf\x9a\x50\x1b\xda\xa5\x99\x22\xfb\xfb\xf3\x77\x6c\xb8\xfb\x84\x32\x67\xa8\xac\x0c\x21\x67\x07\x8f\x4d\x76\x44\x7f\x6a\xa1\xf9\x99\x85\x26\x5b\xb1\x62\xf1\x07\xc1\xca\x52\x5b\x38\x78\xcc\x99\x71\xed\x89\xf6\x68\xd9\xbb\x42\xc0\xcc\x3b\x7b\x65\xc5\x37\x19\xc2\xc5\xa3\x12\x7c\x80\x47\x64\x06\xee\xcc\xb9\xf2\x8e\xd0\x5b\x06\x46\x4d\xa5\x5b\x2b\x2b\x5d\x7b\xab\x34\xe6\xec\xab\x23\x8d\xb0\xdf\x6d\x63\xc9\xca\x13\x91\x77\xef\x9a\x25\x39\x28\xc9\x65\x2d\x9a\x46\xe2\x95\x81\x77\x95\x35\xd5\x6b\xce\x8e\x9a\xbe\xd7\x1e\x7b\xf9\x8f\x9f\x18\x04\xba\x5a\x9d\xb3\x8b\x51\x54\xaf\x61\xf5\xf9\x65\x03\x56\x1f\x68\x0d\xab\x2f\x2f\x1b\x68\x7d\x30\x64\xbc\x5b\x03\x6a\x2b\xc9\x9c\xf5\x86\x15\x03\x1d\x0c\x7d\x10\x7c\x34\x8d\xa4\x99\x14\x9b\x6e\x73\x52\x45\x7f\xea\xf0\x16\x8b\xc5\x8b\x41\x2d\x55\xdf\x6f\xc4\x8d\x2b\x73\x9e\x2f\x47\x96\xba\x0e\x2e\x86\x6a\x58\x6e\x8d\x7b\x0d\x70\xbb\x2d\x52\x89\x49\x96\x56\x67\xa8\x43\xeb\x5d\x30\x67\x1d\xab\x7b\xc0\xcc\x08\xa9\x03\x52\xad\xa5\x4a\xed\x61\x7c\xe3\x8d\x58\xec\x77\x5b\xc1\xa9\x7e\x0c\x1a\xe7\xb1\x47\xfb\x1c\xfa\xc3\xe8\x4b\x48\xc3\x04\x4f\x05\xea\x39\x0f\x8e\x51\x7a\x15\x99\x4b\xd7\x01\x4a\x77\xd4\xb0\xbc\x6f\x7b\xce\x7e\x50\xc2\x08\x48\xf8\xce\x40\x12\x6a\xd4\x87\x9c\x75\x1d\x2c\xf7\xbb\x2d\xdc\x6e\xac\xf8\xfd\x2f\xb8\x7c\x62\xc2\x9f\xb9\xfc\x7b\x8c\xf1\x9d\x4d\xb2\x4c\x16\xfe\x57\xa0\xde\x76\x98\xfa\xa3\x11\x3c\xf7\x8b\xdf\x8c\xae\x03\xed\x54\x4a\x59\xf0\xc4\xbd\x10\x7c\x78\x30\x7f\xf3\x62\xef\xe4\x27\x20\xc1\x47\x71\xc1\x6b\x6a\x6c\xb1\xf8\x15\x00\x00\xff\xff\x27\xe5\xde\x92\xdc\x05\x00\x00")

func templateDataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateDataIndexHtml,
		"template/data/index.html",
	)
}

func templateDataIndexHtml() (*asset, error) {
	bytes, err := templateDataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/data/index.html", size: 1500, mode: os.FileMode(420), modTime: time.Unix(1516620489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateDataNot_foundHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x40\x02\x36\x19\x86\x76\x7e\xf9\x25\x0a\x6e\xf9\xa5\x79\x29\x36\xfa\x19\x86\x76\x5c\x70\x29\xfd\x94\xcc\x32\x08\xd7\x46\x3f\x29\x3f\xa5\xd2\x8e\xcb\x46\x3f\xa3\x24\x37\xc7\x8e\x0b\x10\x00\x00\xff\xff\x6e\x35\xc0\x79\x42\x00\x00\x00")

func templateDataNot_foundHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateDataNot_foundHtml,
		"template/data/not_found.html",
	)
}

func templateDataNot_foundHtml() (*asset, error) {
	bytes, err := templateDataNot_foundHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/data/not_found.html", size: 66, mode: os.FileMode(420), modTime: time.Unix(1516622582, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/data/head.html": templateDataHeadHtml,
	"template/data/index.html": templateDataIndexHtml,
	"template/data/not_found.html": templateDataNot_foundHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"head.html": &bintree{templateDataHeadHtml, map[string]*bintree{}},
			"index.html": &bintree{templateDataIndexHtml, map[string]*bintree{}},
			"not_found.html": &bintree{templateDataNot_foundHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

