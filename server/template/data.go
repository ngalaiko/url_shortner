// Code generated by go-bindata.
// sources:
// template/data/index.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x56\x5d\x6f\xdb\xb8\x12\x7d\xf7\xaf\x98\x12\xb7\xb0\x84\x5a\x52\xef\x0d\x8a\x0b\xd8\x52\x80\xa6\x6d\x80\xec\x16\x6d\xb1\x69\xf6\x65\xb1\x08\x28\x72\x64\xd1\xa6\x48\x81\xa4\xec\x78\x03\xff\xf7\x05\xf5\x61\x5b\x76\x52\x3e\x08\x12\x39\x67\xce\xf0\x70\x66\xa8\xb4\x74\x95\xbc\x9e\xa4\x25\x52\x7e\x3d\x01\x00\x48\x9d\x70\x12\xaf\x1f\x8c\x04\x5b\x6a\xe3\xd0\xa4\x49\x37\xd5\x2d\x4b\xa1\xd6\x60\x50\x66\xc4\xba\x9d\x44\x5b\x22\x3a\x02\xa5\xc1\x22\x23\xa5\x73\xb5\x9d\x27\x49\x45\x9f\x18\x57\x71\xae\xb5\xb3\xce\xd0\xda\x7f\x30\x5d\x25\x87\x89\xe4\x2a\xbe\x8a\xff\x9f\x30\x6b\x8f\x73\x71\x25\x54\xcc\xac\x25\x3d\x91\x65\x46\xd4\xae\xfb\xf0\xa3\x68\x14\x73\x42\x2b\x58\xa2\xbb\xf7\x91\x3d\x18\x19\x84\xf0\x7c\x30\xf0\x63\x43\x0d\xd4\x74\x27\x35\xe5\x90\x9d\xad\xf9\xd1\x18\x39\x07\xae\x59\x53\xa1\x72\xf1\x12\xdd\x17\x89\xfe\xf5\x66\x77\xc7\x83\xa9\x50\x75\xe3\xdd\x4e\xc3\x78\x43\x65\x83\x23\xf8\x7e\x31\x19\x7d\x17\xe8\x58\x19\x90\xc4\x0b\x42\x66\x17\x4c\x97\xdc\x7e\x54\xe8\x4a\xcd\xe7\x40\x7e\x7c\xbf\xff\xf9\x02\xca\x8f\x5c\xf3\xdd\x1c\x7e\xbb\xff\xfe\x2d\xb6\xce\x08\xb5\x14\xc5\x2e\xe8\x37\x15\x5e\x20\xf6\x97\x53\xb1\x2b\x51\x05\x83\x5e\x81\x41\x1b\x3e\x83\x41\xd7\x18\x05\x06\x6d\xbc\xb2\x5a\x05\xe1\xe2\x75\xa8\x2d\xf5\x76\x90\xf8\x68\xb3\x9f\x5c\x9e\xc5\xa9\x65\xc0\xa9\xa3\xe7\x07\x22\x0a\x08\xde\xf8\x85\x58\xaf\xcf\xd7\xfc\xa0\x12\x8d\x6b\x91\x31\x1a\xa3\x4d\xb8\xb8\x30\xe9\x22\x1f\xcf\xef\x27\x17\xc7\xde\x26\x66\x06\x24\x49\x08\xbc\x03\xa9\x19\xf5\x11\xc6\xa5\xb6\x4e\xd1\x0a\xe1\x1d\x4c\x93\x29\xbc\x83\x96\xab\x7d\xb4\xf9\xfd\xd8\x18\x39\xf6\xfd\x6a\x7a\xd8\x7e\xa3\x43\x7a\x78\xb6\x2e\xe5\x5b\x46\xcf\xbf\xf8\xa5\x5a\xac\x44\xb6\xfe\xaa\x97\x42\xdd\x3b\xea\xf0\x22\x7b\x6f\x6f\x3c\xe7\xc1\xa0\xb1\xa3\x43\xac\xb5\xb2\xf8\x92\x86\xb6\xb5\xfd\x54\x52\xb5\xc4\x4f\x54\xca\x9c\xb2\xf5\x11\x70\x26\x5c\xf8\xeb\x10\x7f\xed\x0b\x9e\xc7\xba\x33\xad\xac\x96\x18\x4b\xbd\x3c\x1a\x4d\xce\x09\xd2\x64\xa8\xe5\x34\xe9\x1a\x4d\xea\x73\xfc\x7a\x32\x19\x15\xf9\x56\x28\xae\xb7\x71\x91\x7f\xb4\x3b\xc5\xee\x94\x70\x90\x1d\x02\x1b\x69\x75\x7b\x13\x0b\x25\x5c\x30\x96\x82\xd6\xf5\x1d\xef\x5e\xe7\x30\x7d\x7e\x86\xff\xc4\xb7\x94\x61\xae\xf5\xfa\x63\x5d\xdf\x7d\x86\xfd\x7e\x3a\x3b\x0b\x5f\xaf\x05\xf6\x08\x67\x1a\x1c\x2f\x3f\x15\x79\x25\xe1\xd5\xe5\x0d\x1a\xeb\x25\x3b\xf0\x8d\x08\xc5\xfd\xe7\xdf\xc1\x53\x4e\x5e\x92\xfe\xf6\x26\xfe\x58\xd7\x5f\x36\xa8\x9c\xf5\xea\xfd\xa0\x4b\xfc\x53\xe0\x36\xe8\x6d\x86\x66\x73\x4c\x00\x3e\x03\x3b\x03\xc1\xc3\xe3\xa6\x7d\xd6\xaf\xec\x0c\x8a\x95\x85\x0c\xf8\x49\xbe\xda\x9b\xdd\x4f\xba\xfc\x46\x2b\x0c\x6c\xf8\xd7\xfb\xbf\x8f\xc4\xbe\x1e\xf9\x79\x66\x0b\x1e\x86\xf0\xdc\xd7\xd9\xfe\x60\xdb\xbb\x65\x06\xa9\xc3\xde\x3e\xb0\xe1\x02\x56\x36\x16\xbe\xbf\x0a\xbe\x38\x31\x8e\xad\x61\x5d\x01\x32\xad\x14\x32\x17\x17\xbd\x1a\xb1\x42\x97\xa0\x7a\x7c\xb8\x4f\x2c\x5f\xc7\x2b\x4b\x8e\xb8\x62\x65\xe3\x9a\x1a\x54\xee\x9b\xe6\x18\x0b\x65\xd1\xb8\x1b\x2c\xb4\xc1\xa0\xdf\xdc\xa0\x49\x30\x54\xe6\x0c\xa6\x5d\xe2\x4c\x67\x30\x1d\x48\xa2\x95\xb5\x7c\x3d\x0d\xc3\xc5\xe4\x98\x70\x93\x94\x8b\x0d\x30\x49\xad\xcd\x48\x91\x47\xd2\xd7\x56\x94\x37\xce\x69\x45\xda\x56\x10\x55\xf4\x29\x32\x7a\x6b\x33\xf2\xdf\x7e\xc6\x8a\x7f\x30\x23\x92\x9a\x25\xf6\x33\x1d\x20\x72\xbb\x1a\x33\xc2\xb4\x72\x42\x35\xf8\xb8\x15\xae\x1c\x20\xa5\xde\x46\x3e\x12\x4f\x43\xa5\x1d\x80\xb4\x71\xda\x93\xea\xc6\x45\xbe\x41\x8c\x57\x1b\x8b\xd1\xe0\x2d\xa2\x07\xe8\x75\x9a\x70\xb1\xf1\xc1\x17\xf9\xfc\x34\xe2\x83\x68\x96\x69\x1f\x49\xdd\xe4\x52\xb0\xc7\xda\xe8\x42\x48\x9c\x61\x45\x85\x24\x07\x23\xad\x5a\x6c\x46\x2e\xda\xce\x82\xf8\x52\x3c\x73\x7e\x26\x96\x8f\x8b\x0a\x85\x86\x40\x7b\xd1\x67\x64\x2b\xb8\x2b\xe7\xf0\xe1\xfd\xdb\x05\x38\x5d\xcf\xe1\xca\xbf\xd5\xda\x0a\x9f\xa0\x73\xff\x53\x40\x9d\xd8\xe0\x62\xb8\xc1\x4f\xa5\xd7\xa6\x8a\x96\x46\x37\x35\x54\x4f\x91\xad\xa2\x2b\x72\xbc\xd9\x53\x49\x73\x94\x50\x68\x93\x91\xe1\x0a\x26\x03\xd2\x9a\x48\x2b\xb9\x23\xd7\x3f\xa8\xb5\x5b\x6d\x78\x9a\xb4\xe6\x27\xf0\x16\x33\x62\xf2\xc1\x1b\x2d\x09\x08\x7e\xea\xb2\x96\x94\x61\xa9\x25\x47\x93\x91\x2f\xca\xa1\x81\x87\x3f\xbe\x9e\x46\xd2\x49\x31\xf8\xca\x9d\x82\xdc\xa9\xa8\x36\xa2\xa2\x66\x47\x40\x2b\x26\x05\x5b\x67\x64\xf4\x0f\x72\xae\x50\xab\x8b\xc4\xc2\xcd\xe1\xea\xc3\x6b\x12\xb5\x70\x10\xee\x4d\x9a\x0c\xfa\x77\xbd\xb2\x3d\xfa\x93\x7d\xf9\x2d\x0c\x37\x0f\x79\x79\x97\x3d\xfd\x0b\x3c\x70\x7a\x68\x5d\x48\xff\xfb\xf0\x76\x41\xc0\x20\xe5\x5e\x57\x9f\x08\x2d\x63\x9a\x74\x3d\x39\x4d\xba\x5f\xc2\x7f\x03\x00\x00\xff\xff\xa7\xcc\xdf\x31\x1a\x0a\x00\x00")

func templateDataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateDataIndexHtml,
		"template/data/index.html",
	)
}

func templateDataIndexHtml() (*asset, error) {
	bytes, err := templateDataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/data/index.html", size: 2586, mode: os.FileMode(420), modTime: time.Unix(1506590325, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/data/index.html": templateDataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templateDataIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

