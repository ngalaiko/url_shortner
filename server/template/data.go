// Code generated by go-bindata.
// sources:
// template/data/index.html
// DO NOT EDIT!

package template

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDataIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x56\x5d\xab\xe3\x36\x10\x7d\xef\xaf\x98\x8a\x6d\xd9\xa5\xc4\xda\x36\x2c\x2d\xb9\x76\xca\xd2\xee\x42\x21\x94\x72\x4b\xfa\x7a\x51\xac\x49\xac\xbd\x8a\x64\x46\x93\x2f\x4c\xfe\x7b\x91\x9d\x0f\x3b\x71\x92\xed\x4b\xf5\x70\x6f\x34\x9a\x99\x73\x34\x73\x24\x39\x2d\x78\x69\xc7\xdf\x00\x00\xa4\x05\x2a\xdd\xfc\xac\xa7\x6c\xd8\xe2\x78\x4a\x16\x42\xe1\x89\x91\x52\xd9\x98\xce\x2e\xd6\xb8\x57\x20\xb4\x99\x08\xbc\xb3\x18\x0a\x44\x16\x50\x10\xce\x33\x51\x30\x97\x61\x24\xe5\x52\x6d\x73\xed\x92\x99\xf7\x1c\x98\x54\x19\x27\xb9\x5f\xca\x93\x41\x0e\x93\x61\xf2\xb3\xcc\x43\x38\xdb\x92\xa5\x71\x49\x1e\x82\x68\x81\x85\x9c\x4c\xc9\x10\x28\xcf\x84\x0c\xac\xd8\xe4\xf2\x4b\x90\xc6\x69\xdc\x26\x5f\x82\x18\xa7\xb2\x71\xb9\x8a\x39\x1b\xe2\x98\xaf\x5c\xce\xc6\x3b\x20\xd4\x86\x30\xe7\x8f\x2b\x2e\xde\xbe\x83\xaa\xe3\x15\xc7\xc6\x38\xed\x37\x89\xf5\xb9\x8a\x01\x09\x61\x69\x55\x8e\x6f\x4f\x7b\xdb\x6c\x36\xc9\x5c\xe5\x38\xf3\xfe\xb5\xde\xd4\xfa\xa7\xe4\xc7\xf7\x52\x1b\x65\xfd\x42\x7a\xb5\xe2\xe2\x57\x01\x3f\x5c\x25\x8e\x43\xe4\xd6\xa0\xe3\x17\xa3\xb3\xaa\x82\x37\xc9\x6f\xde\xcd\xcd\x22\xf9\x7c\x48\xf7\xb1\x2c\xff\xf8\x1d\xf6\xfb\x9b\xe1\xdf\x1f\xe9\xbf\xac\xc8\xf4\xa6\x98\xf8\x85\x71\xd3\xe7\xc9\x83\x2c\xa1\xf4\x2e\xe0\x0b\xef\x4a\xcc\x72\xaf\x51\x5c\x79\xbe\x7b\xea\x98\xf6\xe7\xfa\x76\x2a\x9e\xca\xb3\x82\xd2\x99\xd7\xbb\x56\x23\x9c\x5a\x43\x6e\x55\x08\x99\x70\x6a\x3d\x53\x04\xcd\xbf\x81\x71\x6b\xa4\x80\xc7\xe9\xdc\x6c\x51\x0f\xd8\x97\xa2\xdb\xb4\xaa\x02\x33\x87\x37\xc9\x34\x20\xc1\x7e\xdf\x59\x4b\xb5\x39\x25\xcf\xbd\x63\x65\x1c\xd2\x45\xfc\xa5\xdf\x01\x8e\x71\xcb\x47\x68\x32\x8b\x82\xc5\xb8\xae\x64\x84\x49\x3e\x1b\x0a\xfc\xa7\x5a\x22\xec\xf7\x70\x36\x4f\xd4\xc9\x9a\x4a\x6d\xd6\x5d\xa0\x1e\x53\x55\x01\xda\x80\x57\xb4\x67\x2b\x66\xef\x8e\x8c\x66\xec\x04\x78\x97\x5b\x93\xbf\x66\xa2\xab\x4d\x01\xf5\xf9\xca\x84\xc5\x39\x8f\xe0\x97\xf7\xdf\x3d\x41\xe9\x83\x89\xaa\x1c\xc5\x03\xa8\xd8\xac\xf1\x49\x8c\xeb\x96\xc3\xc6\x70\x01\x47\x15\xa4\xb2\xc1\xb9\xe6\xe4\x74\x9b\x52\x2a\x9d\x6a\x11\xef\x2f\xea\x91\xc7\xc6\x68\x2e\x46\xf0\x21\x12\x61\x5f\x8e\x60\x78\x93\xd2\x25\x6c\x4d\x2e\xf9\x44\xe4\x29\xdc\xeb\xa4\xb2\x48\x0c\xf5\xdf\x81\x56\x6e\xd1\xdb\xd2\xaa\x02\x8a\x6b\x90\x5c\xa6\xaa\xd3\x95\x84\xb1\x9f\x49\xdd\xaa\x38\xe9\x4b\x70\x51\x87\x3b\x4d\xec\x71\x6c\x11\x9e\x7b\x5a\x0e\x16\xe4\x57\x25\x2c\xb7\x83\xb0\x1c\x0c\xfb\x34\x68\xd5\x0c\x2d\xcc\x3d\x65\xc2\xb8\x72\xc5\x53\xb2\xe2\x98\x21\xd0\xc0\x3b\xbb\x13\xe3\xbf\x54\x08\x1b\x4f\x3a\x95\xb5\x7b\x4f\x9a\x3a\xb6\x83\x1c\x9b\x44\xde\x0a\x30\xba\x9d\xba\xbe\xb1\x0a\x6f\x35\x52\x26\x3e\x39\x46\x82\xe9\xf3\xa4\x8f\xd9\x95\x1c\x61\xc6\x6e\x50\x92\x59\x2a\xda\xb5\xa4\xb9\x40\xfe\x3b\x3e\x08\x53\xb2\x2d\x65\x1e\x14\x51\xeb\xa0\x51\xe9\xf0\xc3\x2d\x49\xd4\xe1\x60\xf8\xdb\x7e\x6d\x5e\x16\xf6\x76\x35\x5b\xa5\x88\xbb\x0e\x07\x5a\xa2\xbf\x30\x84\x4a\xc7\xfa\xf6\xa0\x7d\xed\x39\x6e\xc4\x3b\x31\xee\xf5\xae\x76\x59\xcd\x2c\x0e\x0e\x57\xab\x59\x63\x5f\xb9\x6b\x9f\x4e\xc0\xad\x0d\x72\xf7\x61\xee\xae\x51\xff\xc2\x21\x70\x3c\x7d\x9e\xa4\x92\x8b\xfb\x4e\x4d\x3f\xa6\x64\x1f\xbb\xfe\x63\x70\x13\x6e\xbb\xa5\xf2\x16\xa1\x18\x73\x67\x1b\xdd\xe7\xe2\x38\xee\x1f\xef\x73\xf4\x9d\x22\x34\x0e\x37\x70\x3b\x4e\xea\xf0\xe1\x12\x2f\x8c\xc3\xab\x39\x3e\xff\x4e\xa5\x7a\x00\x22\x1f\xa1\xfc\x77\x1a\xcd\x39\x6b\x71\x69\x19\xfe\x2f\x42\x11\xb6\xee\xfa\xbd\x16\x3c\xc6\xeb\x57\x46\xff\xad\xda\x8a\xe9\xd7\x45\x2a\xeb\x03\xf3\x55\x2f\xef\xe5\x2b\x77\x72\x4a\x65\x93\x3c\x95\xcd\x37\xf0\xbf\x01\x00\x00\xff\xff\x73\xb5\x18\xd4\x0b\x0b\x00\x00")

func templateDataIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templateDataIndexHtml,
		"template/data/index.html",
	)
}

func templateDataIndexHtml() (*asset, error) {
	bytes, err := templateDataIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/data/index.html", size: 2827, mode: os.FileMode(420), modTime: time.Unix(1509969868, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/data/index.html": templateDataIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"data": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templateDataIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

